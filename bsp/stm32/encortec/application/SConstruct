# import sys
# import glob
import os
import shutil
import rtconfig
from SCons.Script import *
from rtconfig import TARGET_NAME
from rtconfig import POST_ACTION
from rtconfig import SDK_ROOT
from rtconfig import RTT_ROOT
from rtconfig import BUILD_DIR
from rtconfig import BUILD_OBJS_DIR

TARGET = f"{TARGET_NAME}.{rtconfig.TARGET_EXT}"

DefaultEnvironment(tools=[])
env = Environment(
    tools=["mingw"],
    AS=rtconfig.AS, ASFLAGS=rtconfig.AFLAGS,
    CC=rtconfig.CC, CFLAGS=rtconfig.CFLAGS,
    AR=rtconfig.AR, ARFLAGS="-rc",
    CXX=rtconfig.CXX, CXXFLAGS=rtconfig.CXXFLAGS,
    LINK=rtconfig.LINK, LINKFLAGS=rtconfig.LFLAGS
)
env.PrependENVPath("PATH", rtconfig.EXEC_PATH)

cppdefines = [
    "RT_USING_LIBC",
    "RT_USING_NEWLIBC",
    "STM32U535xx",
    "USE_HAL_DRIVER",
    "_POSIX_C_SOURCE",
    "__RTTHREAD__",
    "__RT_IPC_SOURCE__",
    "__RT_KERNEL_SOURCE__",
    "gcc",
]
env.Append(CPPDEFINES=cppdefines)

# Add include directories to the search path
CPPPATH = [
    SDK_ROOT,
    os.path.join(SDK_ROOT, "common"),
    os.path.join(RTT_ROOT, "include"),
    os.path.join(RTT_ROOT, "libcpu/arm/common"),
    os.path.join(RTT_ROOT, "libcpu/arm/cortex-m33"),
    os.path.join(RTT_ROOT, "components/drivers/include"),
    os.path.join(RTT_ROOT, "components/drivers/hwcrypto"),
    os.path.join(RTT_ROOT, "components/drivers/spi"),
    os.path.join(RTT_ROOT, "components/finsh"),
    os.path.join(RTT_ROOT, "components/dfs/dfs_v1/include"),
    os.path.join(RTT_ROOT, "components/fal/inc"),
    os.path.join(RTT_ROOT, "components/libc/compilers/common/include"),
    os.path.join(RTT_ROOT, "components/libc/compilers/newlib"),
    os.path.join(RTT_ROOT, "components/libc/cplusplus"),
    os.path.join(RTT_ROOT, "components/libc/posix/io/epoll"),
    os.path.join(RTT_ROOT, "components/libc/posix/io/eventfd"),
    os.path.join(RTT_ROOT, "components/libc/posix/io/poll"),
    os.path.join(RTT_ROOT, "components/libc/posix/ipc"),
    os.path.join(RTT_ROOT, "components/mprotect"),
    os.path.join(RTT_ROOT, "components/net/at/include"),
    os.path.join(RTT_ROOT, "bsp/stm32/libraries/STM32U5xx_HAL/STM32U5xx_HAL_Driver/Inc"),
    os.path.join(RTT_ROOT, "bsp/stm32/libraries/STM32U5xx_HAL/CMSIS/Device/ST/STM32U5xx/Include"),
    os.path.join(RTT_ROOT, "bsp/stm32/libraries/HAL_Drivers/drivers"),
    os.path.join(RTT_ROOT, "bsp/stm32/libraries/HAL_Drivers/drivers/config"),
    os.path.join(RTT_ROOT, "bsp/stm32/libraries/HAL_Drivers/drivers/drv_flash"),
    os.path.join(RTT_ROOT, "bsp/stm32/libraries/HAL_Drivers"),
    os.path.join(RTT_ROOT, "bsp/stm32/libraries/HAL_Drivers/CMSIS/Include"),
    os.path.join(SDK_ROOT, "bootloader"),
    os.path.join(SDK_ROOT, "bootloader/board"),
    os.path.join(SDK_ROOT, "bootloader/board/CubeMX_Config/Inc"),
    os.path.join(SDK_ROOT, "bootloader/board/drivers/fatfs_nand_flash"),
    os.path.join(SDK_ROOT, "bootloader/board/drivers/hal_spi_nand_driver"),
    os.path.join(SDK_ROOT, "bootloader/board/drivers/ota_app"),
    os.path.join(SDK_ROOT, "bootloader/board/drivers/adc_dma"),
    os.path.join(SDK_ROOT, "application", "rt_api"),
    os.path.join(SDK_ROOT, "application", "logging"),
]

driver_cpppath = [
    os.path.join(SDK_ROOT, "application/board/driver/tools"),
    os.path.join(SDK_ROOT, "application/board/driver/adxl372"),
    os.path.join(SDK_ROOT, "application/board/driver/cat1"),
    os.path.join(SDK_ROOT, "application/board/driver/esp32"),
    os.path.join(SDK_ROOT, "application/board/driver/nb"),
    os.path.join(SDK_ROOT, "application/board/driver/esp32"),
    os.path.join(SDK_ROOT, "application/board/driver/data_save_as_file"),
    os.path.join(SDK_ROOT, "application/board/driver/fdc1004"),
    os.path.join(SDK_ROOT, "application/board/driver/gnss"),
    os.path.join(SDK_ROOT, "application/board/driver/gnss/ota/inc"),
    os.path.join(SDK_ROOT, "application/board/driver/hdc3021"),
    os.path.join(SDK_ROOT, "application/board/driver/lpm"),
    os.path.join(SDK_ROOT, "application/board/driver/tmp116"),
    os.path.join(SDK_ROOT, "application/board/driver/voltage"),
    os.path.join(SDK_ROOT, "application/board/driver/watch_dog"),
    os.path.join(SDK_ROOT, "application/board/driver/drv_hash"),
    os.path.join(SDK_ROOT, "application/board/driver/ota"),
]
CPPPATH += driver_cpppath

cloud_cppptah = [
    os.path.join(SDK_ROOT, "application/board/cloud"),
]
CPPPATH += cloud_cppptah

lwgps_cpp_path = [
    os.path.join(SDK_ROOT, "application/packages/lwgps-latest"),
    os.path.join(SDK_ROOT, "application/packages/lwgps-latest/lwgps/lwgps/src/include"),
    os.path.join(SDK_ROOT, "application/packages/lwgps-latest/lwgps/lwgps/src/include/lwgps"),
]
lwgps_c_files = [
    "packages/lwgps-latest/lwgps2rtt.c",
    "packages/lwgps-latest/lwgps/lwgps/src/lwgps/lwgps.c"
]
CPPPATH += lwgps_cpp_path

cjson_cpp_path = [os.path.join(SDK_ROOT, "application/packages/cJSON-v1.7.17")]
cjson_c_files = [
    "packages/cJSON-v1.7.17/cJSON_Utils.c",
    "packages/cJSON-v1.7.17/cJSON.c"
]
CPPPATH += cjson_cpp_path

# littlefs_cpp_path = [os.path.join(SDK_ROOT, "application/packages/littlefs-latest")]
# littlefs_c_files = [
#     "packages/littlefs-latest/dfs_lfs.c",
#     "packages/littlefs-latest/lfs_crc.c",
#     "packages/littlefs-latest/lfs_util.c",
#     "packages/littlefs-latest/lfs.c"
# ]
# CPPPATH += littlefs_cpp_path

env.Append(CPPPATH=CPPPATH)

# Get all .c files in the application directory
# app_c_files = glob.glob(os.path.join("main", "*.c"))
app_c_files = Split("""
main/main.c
main/syscalls.c
rt_api/rt_api.c
logging/logging.c
"""
)

app_c_files += [
    ".test/test_example.c",
    ".test/test_st_at.c",
    ".test/test_file.c",
    # ".test/test_wdg.c",
]

# driver_c_files = [os.path.join("board/driver", i, "%s.c" % i) for i in driver_list if os.path.isdir(os.path.join(SDK_ROOT, "application/board/driver", i))]
driver_c_files = [
    "board/driver/tools/tools.c",
    "board/driver/adxl372/adxl372.c",
    "board/driver/data_save_as_file/data_save_as_file.c",
    "board/driver/fdc1004/fdc1004.c",
    "board/driver/gnss/gnss.c",
    "board/driver/gnss/ota/src/hdl_ports/hdl_flash_api.c",
    "board/driver/gnss/ota/src/hdl_ports/hdl_os_util.c",
    "board/driver/gnss/ota/src/hdl_ports/hdl_uart.c",
    "board/driver/gnss/ota/src/hdl_api.c",
    "board/driver/gnss/ota/src/hdl_brom_base.c",
    "board/driver/gnss/ota/src/hdl_channel.c",
    "board/driver/gnss/ota/src/hdl_da_cmd.c",
    # "board/driver/gnss/ota/src/hdl_demo.c",
    "board/driver/hdc3021/hdc3021.c",
    "board/driver/lpm/lpm.c",
    "board/driver/tmp116/tmp116.c",
    # "board/driver/voltage/voltage.c",
    "board/driver/voltage/voltage_adc.c",
    "board/driver/watch_dog/watch_dog.c",
    "board/driver/cat1/at_client_https.c",
    "board/driver/cat1/at_client_ssl.c",
    "board/driver/cat1/hmac_sha256.c",
    "board/driver/cat1/sha256.c",
    "board/driver/nb/nbiot.c",
    # "board/driver/esp32/esp32.c",
    "board/driver/esp32/at_data_transf.c",
    "board/driver/drv_hash/drv_hash.c",
    "board/driver/ota/ota_cat1.c",
    "board/driver/ota/ota_gnss.c",
    "board/driver/ota/ota_esp32.c",
    "board/driver/ota/ota_stm32u575.c",
    "board/driver/ota/upgrade_manager.c",
]

cloud_c_files = [
    "board/cloud/business.c",
    "board/cloud/settings.c",
    "board/cloud/control.c",
]

app_c_files += driver_c_files

app_c_files += cloud_c_files

app_c_files += lwgps_c_files

app_c_files += cjson_c_files

# app_c_files += littlefs_c_files

# Build objects for your application"s C files with output in the build directory
app_objs = [env.Object(os.path.join(BUILD_OBJS_DIR, os.path.splitext(c)[0]) + ".o", c) for c in app_c_files]

# Link the objects into an executable or library
elf_file = env.Program(TARGET, app_objs)

# Generate .bin file from the .elf file
bin_file = env.Command(f"{TARGET_NAME}.bin",
                       elf_file,
                       action=POST_ACTION)

# Default command
Default(elf_file, bin_file)

# Check if we are in clean mode
if GetOption("clean"):
    # Clean action to remove the entire build directory
    def clean_build_dir(target, source, env):
        if os.path.exists(BUILD_DIR):
            shutil.rmtree(BUILD_DIR)

    # Add the clean action to SCons
    env.AddMethod(clean_build_dir, "CleanBuildDir")

    # Call the clean action when cleaning
    env.CleanBuildDir([], BUILD_DIR)
