#ifndef __ENCORTEC_API_TYPEDEF_H
#define __ENCORTEC_API_TYPEDEF_H

#include "rttypes.h"
#include "rtthread.h"
#include "rtdevice.h"
#include "at.h"
#include <stdarg.h>
#include <sys/stat.h>
#include "drv_fatfs_dhara_nand.h"
#include "drv_nand_flash.h"
#include <dirent.h>
#include <sys/statfs.h>
#include <stdio.h>
#include "stm32u5xx_hal.h"
#include "ota_app.h"

typedef rt_err_t (*rt_thread_init_api_ptr_t)(struct rt_thread *thread, const char *name, void (*entry)(void *parameter), void *parameter, void *stack_start, rt_uint32_t stack_size, rt_uint8_t priority, rt_uint32_t tick);
typedef rt_err_t (*rt_thread_detach_api_ptr_t)(rt_thread_t thread);
typedef rt_thread_t (*rt_thread_create_api_ptr_t)(const char *name, void (*entry)(void *parameter), void *parameter, rt_uint32_t stack_size, rt_uint8_t priority, rt_uint32_t tick);
typedef rt_err_t (*rt_thread_delete_api_ptr_t)(rt_thread_t thread);
typedef rt_err_t (*rt_thread_close_api_ptr_t)(rt_thread_t thread);
typedef rt_thread_t (*rt_thread_self_api_ptr_t)(void);
typedef rt_thread_t (*rt_thread_find_api_ptr_t)(char *name);
typedef rt_err_t (*rt_thread_startup_api_ptr_t)(rt_thread_t thread);
typedef rt_err_t (*rt_thread_yield_api_ptr_t)(void);
typedef rt_err_t (*rt_thread_delay_api_ptr_t)(rt_tick_t tick);
typedef rt_err_t (*rt_thread_delay_until_api_ptr_t)(rt_tick_t *tick, rt_tick_t inc_tick);
typedef rt_err_t(*rt_thread_mdelay_api_ptr_t)(rt_int32_t ms);
typedef rt_err_t (*rt_thread_control_api_ptr_t)(rt_thread_t thread, int cmd, void *arg);
typedef rt_err_t (*rt_thread_suspend_api_ptr_t)(rt_thread_t thread);
typedef rt_err_t (*rt_thread_suspend_with_flag_api_ptr_t)(rt_thread_t thread, int suspend_flag);
typedef rt_err_t (*rt_thread_resume_api_ptr_t)(rt_thread_t thread);
typedef rt_err_t (*rt_thread_get_name_api_ptr_t)(rt_thread_t thread, char *name, rt_uint8_t name_size);
typedef void (*rt_thread_alloc_sig_api_ptr_t)(rt_thread_t tid);
typedef void (*rt_thread_free_sig_api_ptr_t)(rt_thread_t tid);
typedef int (*rt_thread_kill_api_ptr_t)(rt_thread_t tid, int sig);
typedef rt_base_t (*rt_enter_critical_api_ptr_t)(void);
typedef void (*rt_exit_critical_api_ptr_t)(void);
typedef void (*rt_exit_critical_safe_api_ptr_t)(rt_base_t critical_level);
typedef rt_uint16_t (*rt_critical_level_api_ptr_t)(void);
typedef rt_err_t (*rt_sem_init_api_ptr_t)(rt_sem_t sem, const char *name, rt_uint32_t value, rt_uint8_t flag);
typedef rt_err_t (*rt_sem_detach_api_ptr_t)(rt_sem_t sem);
typedef rt_sem_t (*rt_sem_create_api_ptr_t)(const char *name, rt_uint32_t value, rt_uint8_t flag);
typedef rt_err_t (*rt_sem_delete_api_ptr_t)(rt_sem_t sem);
typedef rt_err_t (*rt_sem_take_api_ptr_t)(rt_sem_t sem, rt_int32_t time);
typedef rt_err_t (*rt_sem_take_interruptible_api_ptr_t)(rt_sem_t sem, rt_int32_t time);
typedef rt_err_t (*rt_sem_take_killable_api_ptr_t)(rt_sem_t sem, rt_int32_t time);
typedef rt_err_t (*rt_sem_trytake_api_ptr_t)(rt_sem_t sem);
typedef rt_err_t (*rt_sem_release_api_ptr_t)(rt_sem_t sem);
typedef rt_err_t (*rt_sem_control_api_ptr_t)(rt_sem_t sem, int cmd, void *arg);
typedef rt_err_t (*rt_mutex_init_api_ptr_t)(rt_mutex_t mutex, const char *name, rt_uint8_t flag);
typedef rt_err_t (*rt_mutex_detach_api_ptr_t)(rt_mutex_t mutex);
typedef rt_mutex_t (*rt_mutex_create_api_ptr_t)(const char *name, rt_uint8_t flag);
typedef rt_err_t (*rt_mutex_delete_api_ptr_t)(rt_mutex_t mutex);
typedef void (*rt_mutex_drop_thread_api_ptr_t)(rt_mutex_t mutex, rt_thread_t thread);
typedef rt_uint8_t (*rt_mutex_setprioceiling_api_ptr_t)(rt_mutex_t mutex, rt_uint8_t priority);
typedef rt_uint8_t (*rt_mutex_getprioceiling_api_ptr_t)(rt_mutex_t mutex);
typedef rt_err_t (*rt_mutex_take_api_ptr_t)(rt_mutex_t mutex, rt_int32_t time);
typedef rt_err_t (*rt_mutex_trytake_api_ptr_t)(rt_mutex_t mutex);
typedef rt_err_t (*rt_mutex_take_interruptible_api_ptr_t)(rt_mutex_t mutex, rt_int32_t time);
typedef rt_err_t (*rt_mutex_take_killable_api_ptr_t)(rt_mutex_t mutex, rt_int32_t time);
typedef rt_err_t (*rt_mutex_release_api_ptr_t)(rt_mutex_t mutex);
typedef rt_err_t (*rt_mutex_control_api_ptr_t)(rt_mutex_t mutex, int cmd, void *arg);
typedef rt_err_t (*rt_event_init_api_ptr_t)(rt_event_t event, const char *name, rt_uint8_t flag);
typedef rt_err_t (*rt_event_detach_api_ptr_t)(rt_event_t event);
typedef rt_event_t (*rt_event_create_api_ptr_t)(const char *name, rt_uint8_t flag);
typedef rt_err_t (*rt_event_delete_api_ptr_t)(rt_event_t event);
typedef rt_err_t (*rt_event_send_api_ptr_t)(rt_event_t event, rt_uint32_t set);
typedef rt_err_t (*rt_event_recv_api_ptr_t)(rt_event_t event, rt_uint32_t set, rt_uint8_t option, rt_int32_t timeout, rt_uint32_t *recved);
typedef rt_err_t (*rt_event_recv_interruptible_api_ptr_t)(rt_event_t event, rt_uint32_t set, rt_uint8_t option, rt_int32_t timeout, rt_uint32_t *recved);
typedef rt_err_t (*rt_event_recv_killable_api_ptr_t)(rt_event_t event, rt_uint32_t set, rt_uint8_t option, rt_int32_t timeout, rt_uint32_t *recved);
typedef rt_err_t (*rt_event_control_api_ptr_t)(rt_event_t event, int cmd, void *arg);
typedef rt_err_t (*rt_mq_init_api_ptr_t)(rt_mq_t mq, const char *name, void *msgpool, rt_size_t msg_size, rt_size_t pool_size, rt_uint8_t flag);
typedef rt_err_t (*rt_mq_detach_api_ptr_t)(rt_mq_t mq);
typedef rt_mq_t (*rt_mq_create_api_ptr_t)(const char *name, rt_size_t msg_size, rt_size_t max_msgs, rt_uint8_t flag);
typedef rt_err_t (*rt_mq_delete_api_ptr_t)(rt_mq_t mq);
typedef rt_err_t (*rt_mq_send_api_ptr_t)(rt_mq_t mq, const void *buffer, rt_size_t size);
typedef rt_err_t (*rt_mq_send_interruptible_api_ptr_t)(rt_mq_t mq, const void *buffer, rt_size_t size);
typedef rt_err_t (*rt_mq_send_killable_api_ptr_t)(rt_mq_t mq, const void *buffer, rt_size_t size);
typedef rt_err_t (*rt_mq_send_wait_api_ptr_t)(rt_mq_t mq, const void *buffer, rt_size_t size, rt_int32_t timeout);
typedef rt_err_t (*rt_mq_send_wait_interruptible_api_ptr_t)(rt_mq_t mq, const void *buffer, rt_size_t size, rt_int32_t timeout);
typedef rt_err_t (*rt_mq_send_wait_killable_api_ptr_t)(rt_mq_t mq, const void *buffer, rt_size_t size, rt_int32_t timeout);
typedef rt_err_t (*rt_mq_urgent_api_ptr_t)(rt_mq_t mq, const void *buffer, rt_size_t size);
typedef rt_ssize_t (*rt_mq_recv_api_ptr_t)(rt_mq_t mq, void *buffer, rt_size_t size, rt_int32_t timeout);
typedef rt_ssize_t (*rt_mq_recv_interruptible_api_ptr_t)(rt_mq_t mq, void *buffer, rt_size_t size, rt_int32_t timeout);
typedef rt_ssize_t (*rt_mq_recv_killable_api_ptr_t)(rt_mq_t mq, void *buffer, rt_size_t size, rt_int32_t timeout);
typedef rt_err_t (*rt_mq_control_api_ptr_t)(rt_mq_t mq, int cmd, void *arg);
typedef void (*rt_interrupt_enter_api_ptr_t)(void);
typedef void (*rt_interrupt_leave_api_ptr_t)(void);
typedef void (*rt_assert_handler_api_ptr_t)(const char *ex_string, const char *func, rt_size_t line);
typedef void (*rt_kputs_api_ptr_t)(const char *str);
typedef int(*rt_kprintf_api_ptr_t)(const char *fmt, ...);
typedef void *(*rt_malloc_api_ptr_t)(rt_size_t size);
typedef void(*rt_free_api_ptr_t)(void *ptr);
typedef void *(*rt_realloc_api_ptr_t)(void *ptr, rt_size_t newsize);
typedef void *(*rt_calloc_api_ptr_t)(rt_size_t count, rt_size_t size);
typedef void *(*_malloc_r_api_ptr_t)(struct _reent *ptr, size_t size);
typedef void *(*_realloc_r_api_ptr_t)(struct _reent *ptr, void *old, size_t newlen);
typedef void *(*_calloc_r_api_ptr_t)(struct _reent *ptr, size_t size, size_t len);
typedef void (*_free_r_api_ptr_t)(struct _reent *ptr, void *addr);
typedef int (*_getpid_r_api_ptr_t)(struct _reent *ptr);
typedef int (*_close_r_api_ptr_t)(struct _reent *ptr, int fd);
typedef int (*_execve_r_api_ptr_t)(struct _reent *ptr, const char * name, char *const *argv, char *const *env);
typedef int (*_fcntl_r_api_ptr_t)(struct _reent *ptr, int fd, int cmd, int arg);
typedef int (*_fork_r_api_ptr_t)(struct _reent *ptr);
typedef int (*_fstat_r_api_ptr_t)(struct _reent *ptr, int fd, struct stat *pstat);
typedef int (*_isatty_r_api_ptr_t)(struct _reent *ptr, int fd);
typedef int (*_kill_r_api_ptr_t)(struct _reent *ptr, int pid, int sig);
typedef int (*_link_r_api_ptr_t)(struct _reent *ptr, const char *old, const char *new);
typedef int (*_wait_r_api_ptr_t)(struct _reent *ptr, int *status);
typedef _off_t (*_lseek_r_api_ptr_t)(struct _reent *ptr, int fd, _off_t pos, int whence);
typedef int (*_mkdir_r_api_ptr_t)(struct _reent *ptr, const char *name, int mode);
typedef int (*_open_r_api_ptr_t)(struct _reent *ptr, const char *file, int flags, int mode);
typedef _ssize_t (*_read_r_api_ptr_t)(struct _reent *ptr, int fd, void *buf, size_t nbytes);
typedef int (*_rename_r_api_ptr_t)(struct _reent *ptr, const char *old, const char *new);
typedef int (*_stat_r_api_ptr_t)(struct _reent *ptr, const char *file, struct stat *pstat);
typedef int (*_unlink_r_api_ptr_t)(struct _reent *ptr, const char *file);
typedef _ssize_t (*_write_r_api_ptr_t)(struct _reent *ptr, int fd, const void *buf, size_t nbytes);
typedef __attribute__((noreturn)) void (*_exit_api_ptr_t)(int status);
typedef void (*rt_memory_info_api_ptr_t)(rt_size_t *total, rt_size_t *used, rt_size_t *max_used);
typedef int (*rt_vsnprintf_api_ptr_t)(char *buf, rt_size_t size, const char *fmt, va_list args);
typedef rt_tick_t (*rt_tick_get_api_ptr_t)(void);
typedef void (*rt_tick_set_api_ptr_t)(rt_tick_t tick);
typedef void (*rt_tick_increase_api_ptr_t)(void);
typedef rt_tick_t (*rt_tick_from_millisecond_api_ptr_t)(rt_int32_t ms);
typedef rt_tick_t (*rt_tick_get_millisecond_api_ptr_t)(void);
typedef void (*rt_system_timer_init_api_ptr_t)(void);
typedef void (*rt_system_timer_thread_init_api_ptr_t)(void);
typedef void (*rt_timer_init_api_ptr_t)(rt_timer_t timer, const char *name, void (*timeout)(void *parameter), void *parameter, rt_tick_t time, rt_uint8_t flag);
typedef rt_err_t (*rt_timer_detach_api_ptr_t)(rt_timer_t timer);
typedef rt_timer_t (*rt_timer_create_api_ptr_t)(const char *name, void (*timeout)(void *parameter), void *parameter, rt_tick_t time, rt_uint8_t flag);
typedef rt_err_t (*rt_timer_delete_api_ptr_t)(rt_timer_t timer);
typedef rt_err_t (*rt_timer_start_api_ptr_t)(rt_timer_t timer);
typedef rt_err_t (*rt_timer_stop_api_ptr_t)(rt_timer_t timer);
typedef rt_err_t (*rt_timer_control_api_ptr_t)(rt_timer_t timer, int cmd, void *arg);
typedef rt_tick_t (*rt_timer_next_timeout_tick_api_ptr_t)(void);
typedef void (*rt_timer_check_api_ptr_t)(void);
typedef void (*rt_system_scheduler_init_api_ptr_t)(void);
typedef void (*rt_system_scheduler_start_api_ptr_t)(void);
typedef void (*rt_schedule_api_ptr_t)(void);
typedef void (*rt_signal_mask_api_ptr_t)(int signo);
typedef void (*rt_signal_unmask_api_ptr_t)(int signo);
typedef rt_sighandler_t (*rt_signal_install_api_ptr_t)(int signo, rt_sighandler_t handler);
typedef int (*rt_signal_wait_api_ptr_t)(const rt_sigset_t *set, rt_siginfo_t *si, rt_int32_t timeout);
typedef int (*rt_system_signal_init_api_ptr_t)(void);
typedef void *(*rt_malloc_align_api_ptr_t)(rt_size_t size, rt_size_t align);
typedef void (*rt_free_align_api_ptr_t)(void *ptr);
typedef rt_err_t (*rt_mb_init_api_ptr_t)(rt_mailbox_t mb, const char *name, void *msgpool, rt_size_t size, rt_uint8_t flag);
typedef rt_err_t (*rt_mb_detach_api_ptr_t)(rt_mailbox_t mb);
typedef rt_mailbox_t (*rt_mb_create_api_ptr_t)(const char *name, rt_size_t size, rt_uint8_t flag);
typedef rt_err_t (*rt_mb_delete_api_ptr_t)(rt_mailbox_t mb);
typedef rt_err_t (*rt_mb_send_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t value);
typedef rt_err_t (*rt_mb_send_interruptible_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t value);
typedef rt_err_t (*rt_mb_send_killable_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t value);
typedef rt_err_t (*rt_mb_send_wait_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t value, rt_int32_t timeout);
typedef rt_err_t (*rt_mb_send_wait_interruptible_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t value, rt_int32_t timeout);
typedef rt_err_t (*rt_mb_send_wait_killable_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t value, rt_int32_t timeout);
typedef rt_err_t (*rt_mb_urgent_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t value);
typedef rt_err_t (*rt_mb_recv_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout);
typedef rt_err_t (*rt_mb_recv_interruptible_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout);
typedef rt_err_t (*rt_mb_recv_killable_api_ptr_t)(rt_mailbox_t mb, rt_ubase_t *value, rt_int32_t timeout);
typedef rt_err_t (*rt_mb_control_api_ptr_t)(rt_mailbox_t mb, int cmd, void *arg);
typedef rt_device_t (*rt_device_find_api_ptr_t)(const char *name);
typedef rt_err_t (*rt_device_register_api_ptr_t)(rt_device_t dev, const char *name, rt_uint16_t flags);
typedef rt_err_t (*rt_device_unregister_api_ptr_t)(rt_device_t dev);
typedef rt_device_t (*rt_device_create_api_ptr_t)(int type, int attach_size);
typedef void (*rt_device_destroy_api_ptr_t)(rt_device_t device);
typedef rt_err_t (*rt_device_set_rx_indicate_api_ptr_t)(rt_device_t dev, rt_err_t (*rx_ind)(rt_device_t dev, rt_size_t size));
typedef rt_err_t (*rt_device_set_tx_complete_api_ptr_t)(rt_device_t dev, rt_err_t (*tx_done)(rt_device_t dev, void *buffer));
typedef rt_err_t (*rt_device_init_api_ptr_t)(rt_device_t dev);
typedef rt_err_t (*rt_device_open_api_ptr_t)(rt_device_t dev, rt_uint16_t oflag);
typedef rt_err_t (*rt_device_close_api_ptr_t)(rt_device_t dev);
typedef rt_ssize_t (*rt_device_read_api_ptr_t)(rt_device_t dev, rt_off_t pos, void *buffer, rt_size_t size);
typedef rt_ssize_t (*rt_device_write_api_ptr_t)(rt_device_t dev, rt_off_t pos, const void *buffer, rt_size_t size);
typedef rt_err_t (*rt_device_control_api_ptr_t)(rt_device_t dev, int cmd, void *arg);
typedef rt_alarm_t (*rt_alarm_create_api_ptr_t)(rt_alarm_callback_t callback, struct rt_alarm_setup *setup);
typedef rt_err_t (*rt_alarm_control_api_ptr_t)(rt_alarm_t alarm, int cmd, void *arg);
typedef void (*rt_alarm_update_api_ptr_t)(rt_device_t dev, rt_uint32_t event);
typedef rt_err_t (*rt_alarm_delete_api_ptr_t)(rt_alarm_t alarm);
typedef rt_err_t (*rt_alarm_start_api_ptr_t)(rt_alarm_t alarm);
typedef rt_err_t (*rt_alarm_stop_api_ptr_t)(rt_alarm_t alarm);
typedef int (*rt_alarm_system_init_api_ptr_t)(void);
typedef struct rt_hwcrypto_ctx *(*rt_hwcrypto_crc_create_api_ptr_t)(struct rt_hwcrypto_device *device, hwcrypto_crc_mode mode);
typedef void (*rt_hwcrypto_crc_destroy_api_ptr_t)(struct rt_hwcrypto_ctx *ctx);
typedef rt_uint32_t (*rt_hwcrypto_crc_update_api_ptr_t)(struct rt_hwcrypto_ctx *ctx, const rt_uint8_t *input, rt_size_t length);
typedef void (*rt_hwcrypto_crc_cfg_api_ptr_t)(struct rt_hwcrypto_ctx *ctx, struct hwcrypto_crc_cfg *cfg);
typedef struct rt_hwcrypto_device *(*rt_hwcrypto_dev_default_api_ptr_t)(void);
typedef rt_err_t (*rt_i2c_bus_device_register_api_ptr_t)(struct rt_i2c_bus_device *bus, const char *bus_name);
typedef struct rt_i2c_bus_device *(*rt_i2c_bus_device_find_api_ptr_t)(const char *bus_name);
typedef rt_ssize_t (*rt_i2c_transfer_api_ptr_t)(struct rt_i2c_bus_device *bus, struct rt_i2c_msg msgs[], rt_uint32_t num);
typedef rt_err_t (*rt_i2c_control_api_ptr_t)(struct rt_i2c_bus_device *bus, int cmd, void *args);
typedef rt_ssize_t (*rt_i2c_master_send_api_ptr_t)(struct rt_i2c_bus_device *bus, rt_uint16_t addr, rt_uint16_t flags, const rt_uint8_t *buf, rt_uint32_t count);
typedef rt_ssize_t (*rt_i2c_master_recv_api_ptr_t)(struct rt_i2c_bus_device *bus, rt_uint16_t addr, rt_uint16_t flags, rt_uint8_t *buf, rt_uint32_t count);
typedef int (*rt_device_pin_register_api_ptr_t)(const char *name, const struct rt_pin_ops *ops, void *user_data);
typedef void (*rt_pin_mode_api_ptr_t)(rt_base_t pin, rt_uint8_t mode);
typedef void (*rt_pin_write_api_ptr_t)(rt_base_t pin, rt_ssize_t value);
typedef rt_ssize_t (*rt_pin_read_api_ptr_t)(rt_base_t pin);
typedef rt_base_t (*rt_pin_get_api_ptr_t)(const char *name);
typedef rt_err_t (*rt_pin_attach_irq_api_ptr_t)(rt_base_t pin, rt_uint8_t mode, void (*hdr)(void *args), void *args);
typedef rt_err_t (*rt_pin_detach_irq_api_ptr_t)(rt_base_t pin);
typedef rt_err_t (*rt_pin_irq_enable_api_ptr_t)(rt_base_t pin, rt_uint8_t enabled);
typedef rt_err_t (*set_date_api_ptr_t)(rt_uint32_t year, rt_uint32_t month, rt_uint32_t day);
typedef rt_err_t (*set_time_api_ptr_t)(rt_uint32_t hour, rt_uint32_t minute, rt_uint32_t second);
typedef rt_err_t (*set_timestamp_api_ptr_t)(time_t timestamp);
typedef rt_err_t (*get_timestamp_api_ptr_t)(time_t *timestamp);
typedef rt_err_t (*rt_spi_bus_register_api_ptr_t)(struct rt_spi_bus *bus, const char *name, const struct rt_spi_ops *ops);
typedef rt_err_t (*rt_spi_bus_attach_device_api_ptr_t)(struct rt_spi_device *device, const char *name, const char *bus_name, void *user_data);
typedef rt_err_t (*rt_spi_bus_attach_device_cspin_api_ptr_t)(struct rt_spi_device *device, const char *name, const char *bus_name, rt_base_t cs_pin, void *user_data);
typedef rt_err_t (*rt_spi_bus_configure_api_ptr_t)(struct rt_spi_device *device);
typedef rt_err_t (*rt_spi_take_bus_api_ptr_t)(struct rt_spi_device *device);
typedef rt_err_t (*rt_spi_release_bus_api_ptr_t)(struct rt_spi_device *device);
typedef rt_err_t (*rt_spi_take_api_ptr_t)(struct rt_spi_device *device);
typedef rt_err_t (*rt_spi_release_api_ptr_t)(struct rt_spi_device *device);
typedef rt_err_t (*rt_spi_configure_api_ptr_t)(struct rt_spi_device *device, struct rt_spi_configuration *cfg);
typedef rt_err_t (*rt_spi_send_then_recv_api_ptr_t)(struct rt_spi_device *device, const void *send_buf, rt_size_t send_length, void *recv_buf, rt_size_t recv_length);
typedef rt_err_t (*rt_spi_send_then_send_api_ptr_t)(struct rt_spi_device *device, const void *send_buf1, rt_size_t send_length1, const void *send_buf2, rt_size_t send_length2);
typedef rt_ssize_t (*rt_spi_transfer_api_ptr_t)(struct rt_spi_device *device, const void *send_buf, void *recv_buf, rt_size_t length);
typedef rt_err_t (*rt_spi_sendrecv8_api_ptr_t)(struct rt_spi_device *device, rt_uint8_t senddata, rt_uint8_t *recvdata);
typedef rt_err_t (*rt_spi_sendrecv16_api_ptr_t)(struct rt_spi_device *device, rt_uint16_t senddata, rt_uint16_t *recvdata);
typedef struct rt_spi_message *(*rt_spi_transfer_message_api_ptr_t)(struct rt_spi_device *device, struct rt_spi_message *message);
typedef rt_size_t (*at_vprintfln_api_ptr_t)(rt_device_t device, char *send_buf, rt_size_t buf_size, const char *format, va_list args);
typedef int (*at_client_init_api_ptr_t)(const char *dev_name, rt_size_t recv_bufsz, rt_size_t send_bufsz);
typedef at_client_t (*at_client_get_api_ptr_t)(const char *dev_name);
typedef at_client_t (*at_client_get_first_api_ptr_t)(void);
typedef int (*at_client_obj_wait_connect_api_ptr_t)(at_client_t client, rt_uint32_t timeout);
typedef rt_size_t (*at_client_obj_send_api_ptr_t)(at_client_t client, const char *buf, rt_size_t size);
typedef rt_size_t (*at_client_obj_recv_api_ptr_t)(at_client_t client, char *buf, rt_size_t size, rt_int32_t timeout);
typedef void (*at_obj_set_end_sign_api_ptr_t)(at_client_t client, char ch);
typedef int (*at_obj_set_urc_table_api_ptr_t)(at_client_t client, const struct at_urc * table, rt_size_t size);
typedef int (*at_obj_exec_cmd_api_ptr_t)(at_client_t client, at_response_t resp, const char *cmd_expr, ...);
typedef at_response_t (*at_create_resp_api_ptr_t)(rt_size_t buf_size, rt_size_t line_num, rt_int32_t timeout);
typedef void (*at_delete_resp_api_ptr_t)(at_response_t resp);
typedef at_response_t (*at_resp_set_info_api_ptr_t)(at_response_t resp, rt_size_t buf_size, rt_size_t line_num, rt_int32_t timeout);
typedef const char *(*at_resp_get_line_api_ptr_t)(at_response_t resp, rt_size_t resp_line);
typedef const char *(*at_resp_get_line_by_kw_api_ptr_t)(at_response_t resp, const char *keyword);
typedef int (*at_resp_parse_line_args_api_ptr_t)(at_response_t resp, rt_size_t resp_line, const char *resp_expr, ...);
typedef int (*at_resp_parse_line_args_by_kw_api_ptr_t)(at_response_t resp, const char *keyword, const char *resp_expr, ...);
typedef int (*rt_vsprintf_api_ptr_t)(char *dest, const char *format, va_list arg_ptr);
typedef int (*rt_sprintf_api_ptr_t)(char *buf, const char *format, ...);
typedef int (*rt_snprintf_api_ptr_t)(char *buf, rt_size_t size, const char *format, ...);
typedef rt_err_t (*rt_get_errno_api_ptr_t)(void);
typedef void (*rt_set_errno_api_ptr_t)(rt_err_t no);
typedef int *(*_rt_errno_api_ptr_t)(void);
typedef const char *(*rt_strerror_api_ptr_t)(rt_err_t error);
typedef void *(*rt_memset_api_ptr_t)(void *src, int c, rt_ubase_t n);
typedef void *(*rt_memcpy_api_ptr_t)(void *dest, const void *src, rt_ubase_t n);
typedef void *(*rt_memmove_api_ptr_t)(void *dest, const void *src, rt_size_t n);
typedef rt_int32_t (*rt_memcmp_api_ptr_t)(const void *cs, const void *ct, rt_size_t count);
typedef char *(*rt_strdup_api_ptr_t)(const char *s);
typedef rt_size_t (*rt_strnlen_api_ptr_t)(const char *s, rt_ubase_t maxlen);
typedef char *(*rt_strstr_api_ptr_t)(const char *str1, const char *str2);
typedef rt_int32_t (*rt_strcasecmp_api_ptr_t)(const char *a, const char *b);
typedef char *(*rt_strcpy_api_ptr_t)(char *dst, const char *src);
typedef char *(*rt_strncpy_api_ptr_t)(char *dest, const char *src, rt_size_t n);
typedef rt_int32_t (*rt_strncmp_api_ptr_t)(const char *cs, const char *ct, rt_size_t count);
typedef rt_int32_t (*rt_strcmp_api_ptr_t)(const char *cs, const char *ct);
typedef rt_size_t (*rt_strlen_api_ptr_t)(const char *src);
typedef int (*gettimeofday_api_ptr_t)(struct timeval *tv, struct timezone *tz);
typedef void (*HAL_PWR_EnableWakeUpPin_api_ptr_t)(uint32_t WakeUpPin);
typedef void (*HAL_PWREx_EnterSHUTDOWNMode_api_ptr_t)(void);
typedef int (*stime_api_ptr_t)(const time_t *t);
typedef time_t (*timegm_api_ptr_t)(struct tm * const t);
typedef int (*settimeofday_api_ptr_t)(const struct timeval *tv, const struct timezone *tz);
typedef struct tm *(*gmtime_r_api_ptr_t)(const time_t *timep, struct tm *r);
typedef char *(*asctime_r_api_ptr_t)(const struct tm *t, char *buf);
typedef char *(*ctime_r_api_ptr_t)(const time_t * tim_p, char * result);
typedef struct tm* (*localtime_r_api_ptr_t)(const time_t* t, struct tm* r);
typedef rt_uint8_t (*rt_interrupt_get_nest_api_ptr_t)(void);
typedef struct tm *(*gmtime_api_ptr_t)(const time_t* t);
typedef struct tm *(*localtime_api_ptr_t)(const time_t* t);
typedef time_t (*mktime_api_ptr_t)(struct tm* const t);
typedef char *(*ctime_api_ptr_t)(const time_t* tim_p);
typedef time_t (*time_api_ptr_t)(time_t* t);
typedef rt_err_t (*nand_direction_switch_api_ptr_t)(nand_direction_e direction);
typedef rt_err_t (*nand_power_switch_api_ptr_t)(nand_poweron_e poweron);
typedef void (*nand_to_stm32_api_ptr_t)(void);
typedef void (*nand_to_esp32_api_ptr_t)(void);
typedef rt_err_t (*fatfs_dhara_nand_init_api_ptr_t)(void (*callback)(fdnfs_init_status_e *status), fdnfs_init_status_e *status);
typedef rt_err_t (*fatfs_dhara_nand_unmount_api_ptr_t)(void);
typedef rt_err_t (*fatfs_dhara_nand_mount_api_ptr_t)(void);
typedef rt_err_t (*fatfs_dhara_nand_remount_api_ptr_t)(void);
typedef int (*closedir_api_ptr_t)(DIR *d);
typedef DIR *(*opendir_api_ptr_t)(const char *name);
typedef struct dirent *(*readdir_api_ptr_t)(DIR *d);
typedef void (*rewinddir_api_ptr_t)(DIR *d);
typedef void (*seekdir_api_ptr_t)(DIR *d, long offset);
typedef long (*telldir_api_ptr_t)(DIR *d);
typedef int (*statfs_api_ptr_t)(const char *path, struct statfs *buf);
typedef int (*fstatfs_api_ptr_t)(int fd, struct statfs *buf);
typedef int (*mkdir_api_ptr_t)(const char *path, mode_t mode);
typedef int (*chdir_api_ptr_t)(const char *path);
typedef char *(*getcwd_api_ptr_t)(char *buf, size_t size);
typedef int (*rmdir_api_ptr_t)(const char *path);
typedef int (*access_api_ptr_t)(const char *path, int mode);
typedef int (*stat_api_ptr_t)(const char *path, struct stat *buf);
typedef void (*HAL_SYSCFG_VREFBUF_VoltageScalingConfig_api_ptr_t)(uint32_t VoltageScaling);
typedef void (*HAL_SYSCFG_VREFBUF_HighImpedanceConfig_api_ptr_t)(uint32_t Mode);
typedef void (*HAL_SYSCFG_DisableVREFBUF_api_ptr_t)(void);
typedef HAL_StatusTypeDef (*HAL_SYSCFG_EnableVREFBUF_api_ptr_t)(void);
typedef HAL_StatusTypeDef (*HAL_HASH_Init_api_ptr_t)(HASH_HandleTypeDef *hhash);
typedef HAL_StatusTypeDef (*HAL_HASH_DeInit_api_ptr_t)(HASH_HandleTypeDef *hhash);
typedef HAL_StatusTypeDef (*HAL_HMACEx_SHA256_Start_api_ptr_t)(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t *pOutBuffer, uint32_t Timeout);
typedef rt_err_t (*rt_sched_lock_api_ptr_t)(rt_sched_lock_level_t *plvl);
typedef rt_err_t (*rt_sched_unlock_api_ptr_t)(rt_sched_lock_level_t level);
typedef rt_err_t (*rt_sched_unlock_n_resched_api_ptr_t)(rt_sched_lock_level_t level);
typedef const struct fal_flash_dev *(*fal_flash_device_find_api_ptr_t)(const char *name);
typedef const struct fal_partition *(*fal_partition_find_api_ptr_t)(const char *name);
typedef const struct fal_partition *(*fal_get_partition_table_api_ptr_t)(size_t *len);
typedef void (*fal_set_partition_table_temp_api_ptr_t)(struct fal_partition *table, size_t len);
typedef int (*fal_partition_read_api_ptr_t)(const struct fal_partition *part, uint32_t addr, uint8_t *buf, size_t size);
typedef int (*fal_partition_write_api_ptr_t)(const struct fal_partition *part, uint32_t addr, const uint8_t *buf, size_t size);
typedef int (*fal_partition_erase_api_ptr_t)(const struct fal_partition *part, uint32_t addr, size_t size);
typedef int (*fal_partition_erase_all_api_ptr_t)(const struct fal_partition *part);
typedef void (*fal_show_part_table_api_ptr_t)(void);
typedef void (*rt_hw_cpu_reset_api_ptr_t)(void);
typedef mbr_t (*mbr_init_api_ptr_t)(void);
typedef rt_err_t (*mbr_save_api_ptr_t)(void);
typedef void (*HAL_NVIC_SetPriority_api_ptr_t)(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority);
typedef void (*HAL_NVIC_EnableIRQ_api_ptr_t)(IRQn_Type IRQn);
typedef HAL_StatusTypeDef (*HAL_ADC_Init_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADC_DeInit_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_MspInit_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_MspDeInit_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADC_Start_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADC_Stop_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADC_PollForConversion_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t Timeout);
typedef HAL_StatusTypeDef (*HAL_ADC_PollForEvent_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeout);
typedef HAL_StatusTypeDef (*HAL_ADC_Start_IT_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADC_Stop_IT_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADC_Start_DMA_api_ptr_t)(ADC_HandleTypeDef *hadc, const uint32_t *pData, uint32_t Length);
typedef HAL_StatusTypeDef (*HAL_ADC_Stop_DMA_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef uint32_t (*HAL_ADC_GetValue_api_ptr_t)(const ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_IRQHandler_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_ConvCpltCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_ConvHalfCpltCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_LevelOutOfWindowCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_ErrorCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_CalibrationCpltCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_VoltageRegulatorCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADC_ADCReadyCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADC_ConfigChannel_api_ptr_t)(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig);
typedef HAL_StatusTypeDef (*HAL_ADC_AnalogWDGConfig_api_ptr_t)(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *pAnalogWDGConfig);
typedef uint32_t (*HAL_ADC_GetState_api_ptr_t)(const ADC_HandleTypeDef *hadc);
typedef uint32_t (*HAL_ADC_GetError_api_ptr_t)(const ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*ADC_ConversionStop_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup);
typedef HAL_StatusTypeDef (*ADC_Enable_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*ADC_Disable_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*ADC_DMAConvCplt_api_ptr_t)(DMA_HandleTypeDef *hdma);
typedef void (*ADC_DMAHalfConvCplt_api_ptr_t)(DMA_HandleTypeDef *hdma);
typedef void (*ADC_DMAError_api_ptr_t)(DMA_HandleTypeDef *hdma);
typedef HAL_StatusTypeDef (*HAL_ADCEx_Calibration_Start_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff);
typedef uint32_t (*HAL_ADCEx_Calibration_GetValue_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t SingleDiff);
typedef HAL_StatusTypeDef (*HAL_ADCEx_LinearCalibration_GetValue_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t *pLinearCalib_Buffer);
typedef HAL_StatusTypeDef (*HAL_ADCEx_Calibration_SetValue_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t SingleDiff, uint32_t CalibrationFactor);
typedef HAL_StatusTypeDef (*HAL_ADCEx_LinearCalibration_SetValue_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t *pLinearCalib_Buffer);
typedef HAL_StatusTypeDef (*HAL_ADCEx_InjectedStart_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADCEx_InjectedStop_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADCEx_InjectedPollForConversion_api_ptr_t)(ADC_HandleTypeDef *hadc, uint32_t Timeout);
typedef HAL_StatusTypeDef (*HAL_ADCEx_InjectedStart_IT_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADCEx_InjectedStop_IT_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef uint32_t (*HAL_ADCEx_InjectedGetValue_api_ptr_t)(const ADC_HandleTypeDef *hadc, uint32_t InjectedRank);
typedef void (*HAL_ADCEx_InjectedConvCpltCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADCEx_InjectedQueueOverflowCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADCEx_LevelOutOfWindow2Callback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADCEx_LevelOutOfWindow3Callback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef void (*HAL_ADCEx_EndOfSamplingCallback_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADCEx_RegularStop_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADCEx_RegularStop_IT_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADCEx_RegularStop_DMA_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADCEx_InjectedConfigChannel_api_ptr_t)(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *pConfigInjected);
typedef HAL_StatusTypeDef (*HAL_ADCEx_DisableVoltageRegulator_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_ADCEx_EnterADCDeepPowerDownMode_api_ptr_t)(ADC_HandleTypeDef *hadc);
typedef HAL_StatusTypeDef (*HAL_DMA_Init_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMA_DeInit_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMA_Start_api_ptr_t)(DMA_HandleTypeDef *const hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SrcDataSize);
typedef HAL_StatusTypeDef (*HAL_DMA_Start_IT_api_ptr_t)(DMA_HandleTypeDef *const hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SrcDataSize);
typedef HAL_StatusTypeDef (*HAL_DMA_Abort_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMA_Abort_IT_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMA_PollForTransfer_api_ptr_t)(DMA_HandleTypeDef *const hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout);
typedef void (*HAL_DMA_IRQHandler_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMA_RegisterCallback_api_ptr_t)(DMA_HandleTypeDef *const hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (*pCallback)(DMA_HandleTypeDef *const _hdma));
typedef HAL_StatusTypeDef (*HAL_DMA_UnRegisterCallback_api_ptr_t)(DMA_HandleTypeDef *const hdma, HAL_DMA_CallbackIDTypeDef CallbackID);
typedef HAL_DMA_StateTypeDef (*HAL_DMA_GetState_api_ptr_t)(DMA_HandleTypeDef const *const hdma);
typedef uint32_t (*HAL_DMA_GetError_api_ptr_t)(DMA_HandleTypeDef const *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMA_ConfigChannelAttributes_api_ptr_t)(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes);
typedef HAL_StatusTypeDef (*HAL_DMA_GetConfigChannelAttributes_api_ptr_t)(DMA_HandleTypeDef const *const hdma, uint32_t *const pChannelAttributes);
typedef HAL_StatusTypeDef (*HAL_DMA_GetLockChannelAttributes_api_ptr_t)(DMA_HandleTypeDef const *const hdma, uint32_t *const pLockState);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_Init_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_DeInit_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_Start_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_Start_IT_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_BuildNode_api_ptr_t)(DMA_NodeConfTypeDef const *const pNodeConfig, DMA_NodeTypeDef *const pNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_GetNodeConfig_api_ptr_t)(DMA_NodeConfTypeDef *const pNodeConfig, DMA_NodeTypeDef const *const pNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_InsertNode_api_ptr_t)(DMA_QListTypeDef *const pQList, DMA_NodeTypeDef *const pPrevNode, DMA_NodeTypeDef *const pNewNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_InsertNode_Head_api_ptr_t)(DMA_QListTypeDef *const pQList, DMA_NodeTypeDef *const pNewNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_InsertNode_Tail_api_ptr_t)(DMA_QListTypeDef *const pQList, DMA_NodeTypeDef *const pNewNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_RemoveNode_api_ptr_t)(DMA_QListTypeDef *const pQList, DMA_NodeTypeDef *const pNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_RemoveNode_Head_api_ptr_t)(DMA_QListTypeDef *const pQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_RemoveNode_Tail_api_ptr_t)(DMA_QListTypeDef *const pQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_ReplaceNode_api_ptr_t)(DMA_QListTypeDef *const pQList, DMA_NodeTypeDef *const pOldNode, DMA_NodeTypeDef *const pNewNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_ReplaceNode_Head_api_ptr_t)(DMA_QListTypeDef *const pQList, DMA_NodeTypeDef *const pNewNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_ReplaceNode_Tail_api_ptr_t)(DMA_QListTypeDef *const pQList, DMA_NodeTypeDef *const pNewNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_ResetQ_api_ptr_t)(DMA_QListTypeDef *const pQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_InsertQ_api_ptr_t)(DMA_QListTypeDef *const pSrcQList, DMA_NodeTypeDef const *const pPrevNode, DMA_QListTypeDef *const pDestQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_InsertQ_Head_api_ptr_t)(DMA_QListTypeDef *const pSrcQList, DMA_QListTypeDef *const pDestQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_InsertQ_Tail_api_ptr_t)(DMA_QListTypeDef *const pSrcQList, DMA_QListTypeDef *const pDestQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_SetCircularModeConfig_api_ptr_t)(DMA_QListTypeDef *const pQList, DMA_NodeTypeDef *const pFirstCircularNode);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_SetCircularMode_api_ptr_t)(DMA_QListTypeDef *const pQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_ClearCircularMode_api_ptr_t)(DMA_QListTypeDef *const pQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_ConvertQToDynamic_api_ptr_t)(DMA_QListTypeDef *const pQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_ConvertQToStatic_api_ptr_t)(DMA_QListTypeDef *const pQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_LinkQ_api_ptr_t)(DMA_HandleTypeDef *const hdma, DMA_QListTypeDef *const pQList);
typedef HAL_StatusTypeDef (*HAL_DMAEx_List_UnLinkQ_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMAEx_ConfigDataHandling_api_ptr_t)(DMA_HandleTypeDef *const hdma, DMA_DataHandlingConfTypeDef const *const pConfigDataHandling);
typedef HAL_StatusTypeDef (*HAL_DMAEx_ConfigTrigger_api_ptr_t)(DMA_HandleTypeDef *const hdma, DMA_TriggerConfTypeDef const *const pConfigTrigger);
typedef HAL_StatusTypeDef (*HAL_DMAEx_ConfigRepeatBlock_api_ptr_t)(DMA_HandleTypeDef *const hdma, DMA_RepeatBlockConfTypeDef const *const pConfigRepeatBlock);
typedef HAL_StatusTypeDef (*HAL_DMAEx_Suspend_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMAEx_Suspend_IT_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef HAL_StatusTypeDef (*HAL_DMAEx_Resume_api_ptr_t)(DMA_HandleTypeDef *const hdma);
typedef uint32_t (*HAL_DMAEx_GetFifoLevel_api_ptr_t)(DMA_HandleTypeDef const *const hdma);
typedef void (*get_adc_handle_api_ptr_t)(ADC_HandleTypeDef **hadc);
typedef void (*get_dma_node_api_ptr_t)(DMA_NodeTypeDef **dma_node);
typedef void (*get_dma_qlist_api_ptr_t)(DMA_QListTypeDef **dma_qlist);
typedef void (*get_dma_handle_api_ptr_t)(DMA_HandleTypeDef **dma_handle);
typedef HAL_StatusTypeDef (*HAL_HASH_MD5_Start_api_ptr_t)(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t *pOutBuffer, uint32_t Timeout);
typedef HAL_StatusTypeDef (*HAL_HASH_MD5_Accmlt_api_ptr_t)(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size);
typedef HAL_StatusTypeDef (*HAL_HASH_MD5_Accmlt_End_api_ptr_t)(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t *pOutBuffer, uint32_t Timeout);
typedef void (*HAL_PWR_EnterSTANDBYMode_api_ptr_t)(void);
typedef void (*HAL_PWREx_EnableUltraLowPowerMode_api_ptr_t)(void);
typedef void (*HAL_PWREx_DisableUltraLowPowerMode_api_ptr_t)(void);
#endif
